{"version":3,"sources":["waterlogo.gif","test-useState/Counter.js","test-customer-hook/todosReducer.js","test-customer-hook/useCustomerReducer.js","test-customer-hook/Todos.js","test-useContext/ThemedButton.js","test-useContext/Toolbar.js","test-useContext/ThemesContextHook.js","test-useReducer/countReducer.js","test-useReducer/ReducerCounter.js","test-useCallBack/useCallback-hook.js","test-useRef/TextInputWithFocusButton.js","test-useImperativeHandle/FancyInput.js","test-useImperativeHandle/FancyInputParent.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","useState","count","setCount","useEffect","document","title","onClick","todosReducer","state","action","type","text","useCustomerReducer","reducer","initialState","setState","nextState","Todos","nextAction","setNextAction","completed","todos","dispatchRedux","handleAddClick","className","value","onBlur","onChange","e","target","id","themes","light","foreground","background","dark","ThemeContext","React","createContext","ThemedButton","theme","useContext","style","color","ToolBar","ThemesContextHook","Provider","Toolbar","countReducer","initialCount","init","payload","Error","ReducerCounter","useReducer","dispatch","UseCallbackHook","useCallback","memoizedValue","useMemo","TextInputWithFocusButton","inputEl","useRef","ref","current","focus","FancyInput","inputRef","inputRef2","useImperativeHandle","forwardRef","FancyInputParent","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8edc4353.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/waterlogo.ea0d1d93.gif\";","import React, { useState, useEffect } from 'react';\r\n\r\nfunction Counter(props) {\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        // ChatAPI.subscribeToFriendStatus(props.friend.id,\r\n        //     handleStatusChange);\r\n\r\n        return () => {\r\n            // ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        document.title = `Vous avez cliqué ${count}`\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <header> 1. Test useState hook</header>\r\n            <p>Vous avez cliqué {count} fois </p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Cliquez ici\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter","function todosReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'add':           \r\n            return { ...state, text: action.text }         \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todosReducer;","import { useState } from 'react';\r\n\r\nfunction useCustomerReducer(reducer, initialState) {\r\n    const [state, setState] = useState(initialState);\r\n\r\n    function dispatch(action) {\r\n        const nextState = reducer(state, action);\r\n        setState(nextState);\r\n    }\r\n\r\n    return [state, dispatch];\r\n}\r\n\r\nexport default useCustomerReducer;","import './Todos.css';\r\nimport React, { useState } from 'react';\r\nimport todosReducer from './todosReducer';\r\nimport useCustomerReducer from './useCustomerReducer';\r\n\r\nfunction Todos() {\r\n    const [nextAction, setNextAction] = useState('nextAction0');\r\n    const [todos, dispatchRedux] = useCustomerReducer(todosReducer, { text: 'nextAction0', completed: false });\r\n\r\n    function handleAddClick(text) {\r\n        dispatchRedux({ type: 'add', text });\r\n    }\r\n\r\n    function handleText(e) {\r\n        setNextAction(e.target.value);\r\n    }\r\n    return (\r\n        <div className=\"Todo\">\r\n            <header> 2. Test customer Hook</header>\r\n            <p>what is your next action ?</p>\r\n            <input type='text' value={nextAction}\r\n                onBlur={() => handleAddClick(nextAction)}\r\n                onChange={handleText} />\r\n            <button id='confirmButton' onClick={() => handleAddClick(nextAction)}>\r\n                confirm your next action\r\n            </button>\r\n            <p>Your next action will be \"{todos.text}\"  </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todos;","import React, { useContext } from 'react';\r\n\r\nconst themes = {\r\n    light: {\r\n        foreground: \"#000000\",\r\n        background: \"#eeeeee\"\r\n    },\r\n    dark: {\r\n        foreground: \"#ffffff\",\r\n        background: \"#222222\"\r\n    }\r\n}\r\n\r\nconst ThemeContext = React.createContext(themes.light);\r\n\r\nfunction ThemedButton() {\r\n    const theme = useContext(ThemeContext);\r\n    return (\r\n        <button style={{\r\n            background: theme.background,\r\n            color: theme.foreground\r\n        }}>\r\n            Je suis stylé par le contexte de thème !\r\n        </button>\r\n\r\n    )\r\n}\r\n\r\nexport default ThemedButton;\r\nexport { ThemeContext, themes };\r\n","import ThemedButton from \"./ThemedButton\";\r\n\r\nfunction ToolBar(props) {\r\n    return (\r\n        <div>\r\n            <header> 3. Test useContext hook</header>\r\n            <ThemedButton />\r\n        </div>)\r\n}\r\n\r\nexport default ToolBar;\r\n","import { ThemeContext, themes } from './ThemedButton';\r\nimport Toolbar from './Toolbar';\r\n\r\nfunction ThemesContextHook() {\r\n\r\n    return (\r\n        <ThemeContext.Provider value={themes.light}>\r\n            <Toolbar />\r\n        </ThemeContext.Provider>\r\n        \r\n    )\r\n}\r\n\r\nexport default ThemesContextHook;\r\n","function init(initialCount) {\r\n    return { count: initialCount };\r\n}\r\n\r\nfunction countReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'increment':\r\n            return { count: state.count + 1 };\r\n        case 'decrement':\r\n            return { count: state.count - 1 };\r\n        case 'reset':\r\n            return init(action.payload);\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nexport default countReducer;","import countReducer from './countReducer';\r\nimport { useReducer } from 'react';\r\n\r\nconst initialState = { count: 0 };\r\nconst initialCount = 0;\r\nfunction ReducerCounter() {\r\n    const [state, dispatch] = useReducer(countReducer, initialState);\r\n    return (\r\n        <>\r\n            <header>4. test useReducer Hook</header>\r\n            Total: {state.count}\r\n            <button\r\n                onClick={() => dispatch({ type: 'reset', payload: initialCount })}>\r\n                Réinitialiser\r\n            </button>\r\n            <button onClick={() => dispatch({ type: 'decrement' })}>\r\n                -\r\n            </button>\r\n            <button onClick={() => dispatch({ type: 'increment' })}>\r\n                +\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReducerCounter;","import { useCallback, useMemo } from \"react\";\r\nfunction UseCallbackHook() {\r\n    let x = 123;\r\n    let y = 456;\r\n    let memoizedCallback = useCallback(\r\n        () => {\r\n            doSomething(x, y);\r\n        },\r\n        [x, y],\r\n    );\r\n\r\n    function doSomething(a, b) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    let w = 100;\r\n    let t = 456;\r\n    let memoizedValue = useMemo(() => computeExpensiveValue(w, t), [w, t]);\r\n    function computeExpensiveValue(a, b) {\r\n        return a + b;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header> 5. test useCallback hook</header>\r\n            <p>return value {memoizedValue} from useMemo hook to optimize performance </p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UseCallbackHook;","import { useRef } from 'react';\r\n\r\nfunction TextInputWithFocusButton() {\r\n    const inputEl = useRef(null);\r\n    const onButtonClick = () => {\r\n        // `current` fait référence au champ textuel monté dans le DOM\r\n        inputEl.current.focus();\r\n    };\r\n    return (\r\n        <>\r\n            <header>6. Test useRef hook </header>\r\n            <input ref={inputEl} type=\"text\" />\r\n            <button onClick={onButtonClick}>Donner le focus au champ</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TextInputWithFocusButton;","import { useRef, useImperativeHandle, forwardRef } from 'react';\r\nfunction FancyInput(props, ref) {\r\n    const inputRef = useRef();\r\n    const inputRef2 = useRef();\r\n    useImperativeHandle(ref, () => ({\r\n        focus: () => {\r\n            inputRef2.current.focus();\r\n        }\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            <input ref={inputRef} />\r\n            <input ref={inputRef2} />\r\n        </>\r\n    );\r\n}\r\nFancyInput = forwardRef(FancyInput);\r\nexport default FancyInput;","import FancyInput from './FancyInput';\r\nimport { useRef } from 'react';\r\n\r\nfunction FancyInputParent() {\r\n    const inputRef = useRef();\r\n    const onButtonClick = () => {\r\n        // `current` fait référence au champ textuel monté dans le DOM\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <header>7. test useImperativeHandle hook</header>\r\n            <FancyInput ref={inputRef} />\r\n            <button onClick={onButtonClick}>Donner le focus au FancyInput component 1</button>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FancyInputParent;","import logo from './waterlogo.gif';\nimport './App.css';\nimport Counter from './test-useState/Counter'\nimport Todos from './test-customer-hook/Todos';\nimport ThemesContextHook from './test-useContext/ThemesContextHook';\nimport ReducerCounter from './test-useReducer/ReducerCounter';\nimport UseCallbackHook from './test-useCallBack/useCallback-hook';\nimport TextInputWithFocusButton from './test-useRef/TextInputWithFocusButton';\nimport FancyInputParent from './test-useImperativeHandle/FancyInputParent';\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <Todos />\n        <ThemesContextHook />\n        <ReducerCounter />\n        <UseCallbackHook />\n        <TextInputWithFocusButton />\n        <FancyInputParent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}